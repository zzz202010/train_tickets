# Generated by Django 2.2.14 on 2021-05-14 21:32

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20, verbose_name='用户名')),
                ('oname', models.CharField(max_length=20, verbose_name='真实姓名')),
                ('code', models.CharField(max_length=20, verbose_name='身份证号')),
                ('ophone', models.CharField(max_length=20, verbose_name='联系电话')),
                ('start_time', models.TimeField(max_length=20, verbose_name='出发时间')),
                ('arrive_time', models.TimeField(max_length=20, verbose_name='到达时间')),
                ('train_code', models.CharField(max_length=20, verbose_name=' 车次 ')),
                ('from_station_name', models.CharField(max_length=20, verbose_name='出发车站')),
                ('to_station_name', models.CharField(max_length=20, verbose_name='到达车站')),
                ('seat_type', models.CharField(max_length=20, verbose_name='座位类型')),
                ('date', models.CharField(max_length=20, verbose_name='日期')),
                ('price', models.CharField(max_length=20, verbose_name='价格')),
            ],
            options={
                'verbose_name': '车票订单',
                'verbose_name_plural': '车票订单',
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='Problems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20, verbose_name='用户名')),
                ('problem', models.CharField(max_length=200, verbose_name='意见反馈')),
            ],
            options={
                'verbose_name': '用户意见反馈',
                'verbose_name_plural': '用户意见反馈',
                'db_table': 'problems',
            },
        ),
        migrations.CreateModel(
            name='Train',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('train_code', models.CharField(max_length=20, verbose_name=' 车次 ')),
                ('from_station_name', models.CharField(max_length=20, verbose_name='出发车站')),
                ('to_station_name', models.CharField(max_length=20, verbose_name='到达车站')),
                ('date', models.CharField(max_length=20, verbose_name='日期')),
                ('start_time', models.TimeField(max_length=20, verbose_name='出发时间')),
                ('arrive_time', models.TimeField(max_length=20, verbose_name='到达时间')),
                ('sw_seat', models.CharField(max_length=20, verbose_name='商务座')),
                ('one_seat', models.CharField(max_length=20, verbose_name=' 一等座')),
                ('tow_seat', models.CharField(max_length=20, verbose_name='二等座')),
                ('high_soft_lie', models.CharField(max_length=20, verbose_name='高级软卧')),
                ('soft_lie', models.CharField(max_length=20, verbose_name='软卧')),
                ('move_lie', models.CharField(max_length=20, verbose_name='动卧')),
                ('strong_lie', models.CharField(max_length=20, verbose_name='硬卧')),
                ('soft_seat', models.CharField(max_length=20, verbose_name='软座')),
                ('strong_seat', models.CharField(max_length=20, verbose_name='硬座')),
                ('no_seat', models.CharField(max_length=20, verbose_name='无座')),
                ('remark', models.CharField(max_length=20, verbose_name='备注')),
            ],
            options={
                'verbose_name': '火车票',
                'verbose_name_plural': '火车票',
                'db_table': 'trains',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='用户名')),
                ('uphone', models.CharField(max_length=20, unique=True, verbose_name='手机号')),
                ('password', models.CharField(max_length=100, verbose_name='密码')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
